// Configuration
const CONFIG = {
  MAX_STORAGE_MB: 50,
  THUMBNAIL_WIDTH: 64,
  IMAGE_QUALITY: 0.95,
  THUMBNAIL_QUALITY: 0.85
};

// Database Manager - Just encapsulates IndexedDB operations
class DatabaseManager {
  constructor() {
    this.dbName = 'CameraDB';
    this.version = 1;
    this.storeName = 'images';
  }

  async init() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.version);
      
      request.onerror = () => reject(request.error);
      request.onsuccess = () => resolve(request.result);
      
      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains(this.storeName)) {
          db.createObjectStore(this.storeName, { keyPath: 'timestamp' });
        }
      };
    });
  }

  async getImages(db) {
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([this.storeName], 'readonly');
      const store = transaction.objectStore(this.storeName);
      const request = store.getAll();
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  async deleteImage(db, timestamp) {
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);
      const request = store.delete(timestamp);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async deleteAllImages(db) {
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);
      const request = store.clear();
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async storeImage(db, imageBlob) {
    return new Promise((resolve, reject) => {
      const transaction = db.transaction([this.storeName], 'readwrite');
      const store = transaction.objectStore(this.storeName);
      
      const image = {
        timestamp: Date.now() + performance.now() % 1,
        data: imageBlob
      };
      
      const request = store.add(image);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }
}

// Camera Manager - Handles video and capture operations
class CameraManager {
  constructor(video, canvas) {
    this.video = video;
    this.canvas = canvas;
    this.stream = null;
  }

  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({ video: true });
      this.video.srcObject = this.stream;
      console.log('Camera started');
      
      // iOS 14 compatibility settings
      this.video.setAttribute('playsinline', true);
      this.video.setAttribute('webkit-playsinline', true);
      this.video.muted = true;
      this.video.autoplay = true;
      
      await new Promise(resolve => this.video.onloadedmetadata = resolve);
      return true;
    } catch (error) {
      console.error('Camera start failed:', error);
      return false;
    }
  }

  async stop() {
    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop());
      this.video.srcObject = null;
      this.stream = null;
      console.log('Camera stopped');
    }
  }

  async capture() {
    return new Promise((resolve) => {
      requestAnimationFrame(() => {
        this.canvas.width = this.video.videoWidth;
        this.canvas.height = this.video.videoHeight;
        const context = this.canvas.getContext('2d');
        context.drawImage(this.video, 0, 0);
        
        this.canvas.toBlob((blob) => resolve(blob), 'image/jpeg', CONFIG.IMAGE_QUALITY);
      });
    });
  }
}

// Main Application - Keeps core functionality intact
class CameraApp {
  constructor() {
    this.dbManager = new DatabaseManager();
    this.db = null;
    this.initializeUI();
  }

  async initializeUI() {
    // Clear page and add styles (keeping original CSS)
    document.body.innerHTML = '';
    const style = document.createElement('style');
    style.innerHTML = `
      @import url('https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css');
      // ... (rest of original CSS)
    `;
    document.head.appendChild(style);

    // Create UI elements (keeping original structure)
    const container = document.createElement('div');
    container.className = 'flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4';
    document.body.appendChild(container);

    // ... (rest of original UI creation)
    
    // Initialize camera and database
    try {
      this.db = await this.dbManager.init();
      const video = document.createElement('video');
      const canvas = document.createElement('canvas');
      this.cameraManager = new CameraManager(video, canvas);
      await this.cameraManager.start();
      // ... (rest of initialization)
    } catch (error) {
      console.error('Initialization failed:', error);
    }
  }

  // ... (rest of original functionality, minimally reorganized)
}

// Initialize application
const app = new CameraApp();
